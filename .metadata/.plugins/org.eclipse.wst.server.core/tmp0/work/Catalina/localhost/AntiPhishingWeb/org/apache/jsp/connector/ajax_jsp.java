/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2021-03-15 05:22:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.connector;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.helper.ConnectionManager;
import com.feature.urls.TestClassifier;
import com.action.CrawlWebsite;
import com.helper.WebsiteModel;
import com.helper.SpamModel;
import com.helper.PhishMailGuard;
import javax.imageio.ImageIO;
import java.io.FileInputStream;
import java.io.ObjectOutputStream;
import java.net.URLDecoder;
import java.io.OutputStream;
import com.helper.StringHelper;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import com.constant.ServerConstants;
import java.io.File;
import org.apache.commons.fileupload.FileItem;

public final class ajax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.OutputStream");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("org.apache.commons.fileupload.FileItem");
    _jspx_imports_classes.add("com.helper.PhishMailGuard");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("com.helper.WebsiteModel");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.helper.StringHelper");
    _jspx_imports_classes.add("com.helper.ConnectionManager");
    _jspx_imports_classes.add("com.feature.urls.TestClassifier");
    _jspx_imports_classes.add("com.action.CrawlWebsite");
    _jspx_imports_classes.add("javax.imageio.ImageIO");
    _jspx_imports_classes.add("java.io.ObjectOutputStream");
    _jspx_imports_classes.add("com.helper.SpamModel");
    _jspx_imports_classes.add("com.constant.ServerConstants");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	System.out.println("Hiii");
	String sMethod = StringHelper.n2s(request.getParameter("methodId"));
	String returnString = "";
	boolean bypasswrite = false;
	//OutputStream responseBody = response.getOutputStream();
	System.out.println(sMethod);
	HashMap parameters = StringHelper.displayRequest(request);
	System.out.println(parameters);

	if (sMethod.equalsIgnoreCase("checkURL")) {
		System.out.println("Method Calling" + sMethod);
		String url = StringHelper.n2s(request.getParameter("url"));
		url = URLDecoder.decode(url);

		SpamModel sm = PhishMailGuard.getAllInformationFromUrl(url);
		HashMap map = TestClassifier.checkURLPhishing(url);
		double isPhishing = StringHelper.n2d(map.get("d2").toString());

		boolean isphi = true;
		if (isPhishing == 0) {
			returnString = "PHISING";
			isphi = true;
		} else {
			returnString = "NORMAL";
			isphi = false;
		}
		sm.setClassifierResult(isphi ? 1 : 0);
		String res = ConnectionManager.callServer(map.get("arr").toString());
		System.out.println("response: " + res);
		returnString = res;
	} else if (sMethod.equalsIgnoreCase("checkURLCSS")) {
		String url = StringHelper.n2s(request.getParameter("url"));
		url = URLDecoder.decode(url);
		WebsiteModel siteToBeChecked = CrawlWebsite.createCSSTemplate(
				url, true);
		ObjectOutputStream oos = new ObjectOutputStream(
				response.getOutputStream());
		oos.writeObject(siteToBeChecked);
		oos.close();
		return;
	} else if (sMethod.equalsIgnoreCase("checkSCSSSimilatity")) {
		String url = StringHelper.n2s(request.getParameter("url"));
		url = URLDecoder.decode(url);
		String siteToBeChecked = CrawlWebsite.checkIfPhishing(url);
		System.out.println(siteToBeChecked);
		ObjectOutputStream oos = new ObjectOutputStream(
				response.getOutputStream());
		oos.writeObject(siteToBeChecked);
		oos.close();
		return;
	} else if (sMethod.equalsIgnoreCase("logout")) {
		System.out.println("logout");
		session.removeAttribute("USER_MODEL");
		bypasswrite = true;

      out.write("<script>\r\n");
      out.write("\t\t\twindow.location.href='");
      out.print(request.getContextPath());
      out.write("/pages/login.jsp';\r\n");
      out.write("</script>\r\n");

	}

	if (!bypasswrite) {
		out.println(returnString);
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
